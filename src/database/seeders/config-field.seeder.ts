import { AppDataSource } from '../data-source';
import { ConfigField } from '../../modules/config/config.entity';
import { RolesEnum } from '../../enum/roles.enum';
import { DayOfWeek } from '../../utils/dayOfWeek';

const heroConfigFields = [
  {
    entityName: 'hero',
    fieldName: 'page',
    label: 'Page',
    fieldType: 'select',
    optionsJson: JSON.stringify({
      type: 'static',
      value: [
        { value: 'home', label: 'Home' },
        { value: 'gallery', label: 'Gallery' },
        { value: 'about', label: 'About' },
        { value: 'contact', label: 'Contact' },
      ]
    }),
    editable: true,
    displayOrder: 1,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Select the page where this hero content appears',
  },
  {
    entityName: 'hero',
    fieldName: 'backgroundImage',
    label: 'Background Image URL',
    fieldType: 'url',
    editable: true,
    displayOrder: 2,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'URL of the background image',
  },
  {
    entityName: 'hero',
    fieldName: 'title',
    label: 'Title',
    fieldType: 'text',
    editable: true,
    displayOrder: 3,
    validationRulesJson: JSON.stringify({ required: true, minLength: 3, maxLength: 100 }),
    helpText: 'Main title displayed on hero section',
  },
  {
    entityName: 'hero',
    fieldName: 'subtitle',
    label: 'Subtitle',
    fieldType: 'textarea',
    editable: true,
    displayOrder: 4,
    validationRulesJson: JSON.stringify({ maxLength: 250 }),
    helpText: 'Subtitle or description text',
  },
  {
    entityName: 'hero',
    fieldName: 'showControls',
    label: 'Show Controls',
    fieldType: 'boolean',
    editable: true,
    displayOrder: 5,
  },
  {
    entityName: 'hero',
    fieldName: 'volunteerProgramText',
    label: 'Volunteer Program Text',
    fieldType: 'text',
    editable: true,
    displayOrder: 6,
    validationRulesJson: JSON.stringify({ maxLength: 100 }),
    helpText: 'Text for the volunteer program link/button',
  },
  {
    entityName: 'hero',
    fieldName: 'volunteerProgramLink',
    label: 'Volunteer Program Link',
    fieldType: 'url',
    editable: true,
    displayOrder: 7,
    validationRulesJson: JSON.stringify({ pattern: '^https?://.+$' }),
    helpText: 'Link URL for the volunteer program',
  },
];

const eventConfigFields = [
  {
    entityName: 'event',
    fieldName: 'title',
    label: 'Event Title',
    fieldType: 'text',
    editable: true,
    displayOrder: 1,
    validationRulesJson: JSON.stringify({ required: true, minLength: 3, maxLength: 150 }),
  },
  {
    entityName: 'event',
    fieldName: 'startDate',
    label: 'Start Date',
    fieldType: 'datetime',
    editable: true,
    displayOrder: 2,
    validationRulesJson: JSON.stringify({ required: true }),
  },
  {
    entityName: 'event',
    fieldName: 'endDate',
    label: 'End Date',
    fieldType: 'datetime',
    editable: true,
    displayOrder: 3,
    validationRulesJson: JSON.stringify({ required: true }),
  },
  {
    entityName: 'event',
    fieldName: 'location',
    label: 'Location',
    fieldType: 'text',
    editable: true,
    displayOrder: 4,
  },
  {
    entityName: 'event',
    fieldName: 'description',
    label: 'Description',
    fieldType: 'textarea',
    editable: true,
    displayOrder: 5,
  },
  {
    entityName: 'event',
    fieldName: 'image',
    label: 'Image URL',
    fieldType: 'url',
    editable: true,
    displayOrder: 6,
  },
];

const pastorConfigFields = [
  {
    entityName: 'pastor',
    fieldName: 'name',
    label: 'Pastor Name',
    fieldType: 'text',
    editable: true,
    displayOrder: 1,
    validationRulesJson: JSON.stringify({ required: true, minLength: 3, maxLength: 100 }),
  },
  {
    entityName: 'pastor',
    fieldName: 'title',
    label: 'Title',
    fieldType: 'text',
    editable: true,
    displayOrder: 2,
    validationRulesJson: JSON.stringify({ maxLength: 100 }),
  },
  {
    entityName: 'pastor',
    fieldName: 'bio',
    label: 'Biography',
    fieldType: 'textarea',
    editable: true,
    displayOrder: 3,
    validationRulesJson: JSON.stringify({ maxLength: 1000 }),
  },
  {
    entityName: 'pastor',
    fieldName: 'profileImage',
    label: 'Profile Image',
    fieldType: 'image',
    editable: true,
    displayOrder: 4,
    validationRulesJson: JSON.stringify({ pattern: '^https?://.+\\.(jpg|jpeg|png|gif)$' }),
  },
  {
    entityName: 'pastor',
    fieldName: 'isActive',
    label: 'Active Status',
    fieldType: 'boolean',
    editable: true,
    displayOrder: 5,
  }
];

const galleryItemConfigFields = [
  {
    entityName: 'gallery',
    fieldName: 'src',
    label: 'Upload Image',
    fieldType: 'file',
    editable: true,
    displayOrder: 1,
    validationRulesJson: JSON.stringify({ required: true, minLength: 3, maxLength: 150 }),
    helpText: 'URL of the image source',
  },
  {
    entityName: 'gallery',
    fieldName: 'alt',
    label: 'Image Alt Text',
    fieldType: 'text',
    editable: true,
    displayOrder: 2,
    validationRulesJson: JSON.stringify({ maxLength: 500 }),
    helpText: 'Alternative text for the image',
  },
  {
    entityName: 'gallery',
    fieldName: 'caption',
    label: 'Image Caption',
    fieldType: 'text',
    editable: true,
    displayOrder: 3,
    validationRulesJson: JSON.stringify({ maxLength: 500 }),
    helpText: 'Caption for the image',
  },
  {
    entityName: 'gallery',
    fieldName: 'date',
    label: 'Date of Image',
    fieldType: 'date',
    editable: true,
    displayOrder: 4,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Date associated with the image',
  },
  {
    entityName: 'gallery',
    fieldName: 'tags',
    label: 'Image Tags',
    fieldType: 'select',
    optionsJson: JSON.stringify({
      type: "dynamic",
      endpoint: "/api/tags",
    }),
    editable: true,
    displayOrder: 5,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Tags associated with the image',
  }
];

const aboutConfigFields = [
  {
    entityName: 'about',
    fieldName: 'mainTitle',
    label: 'About Main Title',
    fieldType: 'string',
    editable: true,
    displayOrder: 6,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'About main title',
  },
  {
    entityName: 'about',
    fieldName: 'highlightedTitle',
    label: 'Highlighted Title',
    fieldType: 'text',
    editable: true,
    displayOrder: 7,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Highlighted title for the about section',
  },
  {
    entityName: 'about',
    fieldName: 'description',
    label: 'About Description',
    fieldType: 'textarea',
    editable: true,
    displayOrder: 8,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Description for the about section',
  },
  {
    entityName: 'about',
    subEntityName: 'story',
    fieldName: 'title',
    label: 'Story Title',
    fieldType: 'text',
    editable: true,
    displayOrder: 9,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Title for the story item',
  },
  {
    entityName: 'about',
    subEntityName: 'story',
    fieldName: 'content',
    label: 'Story Content',
    fieldType: 'textarea',
    editable: true,
    displayOrder: 10,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Content for the story item',
  },
  {
    entityName: 'about',
    subEntityName: 'storyStat',
    fieldName: 'text',
    label: 'Story Stat Text',
    fieldType: 'text',
    editable: true,
    displayOrder: 11,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Content for the story item',
    multipleOccurrence: true,
    maxOccurrence: 4
  },
  {
    entityName: 'about',
    subEntityName: 'values',
    fieldName: 'title',
    label: 'Value Title',
    fieldType: 'text',
    editable: true,
    displayOrder: 12,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Title for the values section',
  },
  {
    entityName: 'about',
    subEntityName: 'values',
    fieldName: 'subtitle',
    label: 'Value Subtitle',
    fieldType: 'text',
    editable: true,
    displayOrder: 13,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Value subtitle',
  },
  {
    entityName: 'about',
    subEntityName: 'valueItem',
    fieldName: 'icon',
    label: 'Value Item Icon',
    fieldType: 'select',
    optionsJson: JSON.stringify({
      type: "dynamic",
      endpoint: "/api/icons",
    }),
    editable: true,
    displayOrder: 14,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Icon for the value item',
    multipleOccurrence: true,
    maxOccurrence: 4
  },
  {
    entityName: 'about',
    subEntityName: 'valueItem',
    fieldName: 'title',
    label: 'Value Item Title',
    fieldType: 'text',
    editable: true,
    displayOrder: 14,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Title for the value item',
    multipleOccurrence: true,
    maxOccurrence: 4
  },
  {
    entityName: 'about',
    subEntityName: 'valueItem',
    fieldName: 'description',
    label: 'Value Item Description',
    fieldType: 'textarea',
    editable: true,
    displayOrder: 14,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Description for the value item',
    multipleOccurrence: true,
    maxOccurrence: 4
  },
]

const beliefConfigFields = [
  {
    entityName: 'about',
    subEntityName: 'belief',
    fieldName: 'title',
    label: 'Belief Title',
    fieldType: 'text',
    editable: true,
    displayOrder: 1,
    validationRulesJson: JSON.stringify({ required: true, minLength: 3, maxLength: 100 }),
    helpText: 'Title for the belief section',
  },
  {
    entityName: 'about',
    subEntityName: 'belief',
    fieldName: 'content',
    label: 'Belief Content',
    fieldType: 'textarea',
    editable: true,
    displayOrder: 2,
    validationRulesJson: JSON.stringify({ required: true, maxLength: 1000 }),
    helpText: 'Content for the belief section',
  },
];

const contactInfoConfigFields = [
  {
    entityName: 'contact',
    fieldName: 'title',
    label: 'Contact Title',
    fieldType: 'text',
    editable: true,
    displayOrder: 1,
    validationRulesJson: JSON.stringify({ required: true, minLength: 3, maxLength: 100 }),
    helpText: 'Title for the contact section',
  },
  {
    entityName: 'contact',
    fieldName: 'subtitle',
    label: 'Contact Subtitle',
    fieldType: 'text',
    editable: true,
    displayOrder: 2,
    validationRulesJson: JSON.stringify({ required: true, minLength: 3, maxLength: 100 }),
    helpText: 'Subtitle for the contact section',
  },
  {
    entityName: 'contact',
    fieldName: 'address',
    label: 'Address',
    fieldType: 'text',
    editable: true,
    displayOrder: 3,
    validationRulesJson: JSON.stringify({ required: true, minLength: 3, maxLength: 100 }),
    helpText: 'Address for the contact section',
  },
  {
    entityName: 'contact',
    fieldName: 'email',
    label: 'Contact Email',
    fieldType: 'text',
    editable: true,
    displayOrder: 4,
    validationRulesJson: JSON.stringify({ required: true, format: 'email' }),
    helpText: 'Email for the contact section',
  },
  {
    entityName: 'contact',
    fieldName: 'phone',
    label: 'Contact Phone',
    fieldType: 'text',
    editable: true,
    displayOrder: 5,
    validationRulesJson: JSON.stringify({ required: true, format: 'phone' }),
    helpText: 'Phone number for the contact section',
  },
  {
    entityName: 'contact',
    fieldName: 'socialPlatforms',
    label: 'Social Platforms',
    fieldType: 'select',
    optionsJson: JSON.stringify({
      type: "dynamic",
      endpoint: "/api/social-links",
    }),
    editable: true,
    displayOrder: 7,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Select social platforms to display',
  },
];

const ctaConfigFields =[
  {
    entityName: 'callToAction',
    fieldName: 'title',
    label: 'CTA Title',
    fieldType: 'text',
    editable: true,
    displayOrder: 1,
    validationRulesJson: JSON.stringify({ required: true, minLength: 3, maxLength: 100 }),
    helpText: 'Title for the CTA section',
    multipleOccurrence: true,
  },
  {
    entityName: 'callToAction',
    fieldName: 'subtitle',
    label: 'CTA Subtitle',
    fieldType: 'text',
    editable: true,
    displayOrder: 2,
    validationRulesJson: JSON.stringify({ required: true, minLength: 3, maxLength: 100 }),
    helpText: 'Subtitle for the CTA section',
  },
  {
    entityName: 'callToAction',
    subEntityName: 'button',
    fieldName: 'icon',
    label: 'CTA Button Icon',
    fieldType: 'select',
    optionsJson: JSON.stringify({
      type: "dynamic",
      endpoint: "/api/icons",
    }),
    editable: true,
    displayOrder: 3,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Icon for the CTA Button',
    multipleOccurrence: true,
    maxOccurrence: 2
  },
  {
    entityName: 'callToAction',
    subEntityName: 'button',
    fieldName: 'text',
    label: 'CTA Text',
    fieldType: 'text',
    editable: true,
    displayOrder: 4,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Text for the CTA Button',
    multipleOccurrence: true,
    maxOccurrence: 2
  },
  {
    entityName: 'callToAction',
    subEntityName: 'button',
    fieldName: 'variant',
    label: 'CTA Button Variant',
    fieldType: 'select',
    optionsJson: JSON.stringify({
      type: 'static',
      value: [
        { value: 'primary', label: 'Primary Button' },
        { value: 'secondary', label: 'Secondary Button' },
      ]
    }),
    editable: true,
    displayOrder: 5,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Variant for the CTA Button',
    multipleOccurrence: true,
    maxOccurrence: 2
  },
];

const footerConfigFields = [
  {
    entityName: 'footer',
    fieldName: 'newletterTitle',
    label: 'Newletter Title',
    fieldType: 'text',
    editable: true,
    displayOrder: 1,
    validationRulesJson: JSON.stringify({ required: true, minLength: 3, maxLength: 100 }),
    helpText: 'Title for the newsletter section',
  },
  {
    entityName: 'footer',
    fieldName: 'newletterSubtitle',
    label: 'Newsletter Subtitle',
    fieldType: 'text',
    editable: true,
    displayOrder: 2,
    validationRulesJson: JSON.stringify({ required: true, minLength: 3, maxLength: 100 }),
    helpText: 'Subtitle for the newsletter section',
  },
  {
    entityName: 'footer',
    fieldName: 'logoSrc',
    label: 'Logo Url',
    fieldType: 'url',
    editable: true,
    displayOrder: 3,
    validationRulesJson: JSON.stringify({ required: true, minLength: 3, maxLength: 100 }),
    helpText: 'Url for Logo',
  },
  {
    entityName: 'footer',
    fieldName: 'logoAlt',
    label: 'Alt Text for Logo',
    fieldType: 'text',
    editable: true,
    displayOrder: 4,
    validationRulesJson: JSON.stringify({ required: true, minLength: 3, maxLength: 100 }),
    helpText: 'Alternative Text for Logo',
  },
  {
    entityName: 'footer',
    fieldName: 'description',
    label: 'Footer description',
    fieldType: 'textarea',
    editable: true,
    displayOrder: 5,
    validationRulesJson: JSON.stringify({ required: true, minLength: 3, maxLength: 100 }),
    helpText: 'Description for footer section',
  },
  {
    entityName: 'footer',
    fieldName: 'address',
    label: 'Address',
    fieldType: 'text',
    editable: true,
    displayOrder: 6,
    validationRulesJson: JSON.stringify({ required: true, minLength: 3, maxLength: 100 }),
    helpText: 'Address for the contact section',
  },
  {
    entityName: 'footer',
    fieldName: 'email',
    label: 'Contact Email',
    fieldType: 'text',
    editable: true,
    displayOrder: 7,
    validationRulesJson: JSON.stringify({ required: true, format: 'email' }),
    helpText: 'Email for the contact section',
  },
  {
    entityName: 'footer',
    fieldName: 'phone',
    label: 'Contact Phone',
    fieldType: 'text',
    editable: true,
    displayOrder: 8,
    validationRulesJson: JSON.stringify({ required: true, format: 'phone' }),
    helpText: 'Phone number for the contact section',
  },
    {
    entityName: 'footer',
    fieldName: 'schedule',
    label: 'Schedule of Regular Programs',
    fieldType: 'object',
    editable: true,
    displayOrder: 9,
    validationRulesJson: JSON.stringify({ required: true, minLength: 3, maxLength: 100 }),
    helpText: 'Schedule for the contact section',
    multipleOccurrence: true,
  },
  {
    entityName: 'footer',
    fieldName: 'socialPlatforms',
    label: 'Social Platforms',
    fieldType: 'select',
    optionsJson: JSON.stringify({
      type: "dynamic",
      endpoint: "/api/social-links",
    }),
    editable: true,
    displayOrder: 10,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Select social platforms to display',
    multipleOccurrence: true,
  },
  {
    entityName: 'footer',
    fieldName: 'quickLinks',
    label: 'Quick Links',
    fieldType: 'select',
    optionsJson: JSON.stringify({
      type: "dynamic",
      endpoint: "/api/site-links",
    }),
    editable: true,
    displayOrder: 11,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Select site links to display as quick links',
    multipleOccurrence: true,
  },
  {
    entityName: 'footer',
    fieldName: 'ministriesLinks',
    label: 'Ministries Links',
    fieldType: 'select',
    optionsJson: JSON.stringify({
      type: "dynamic",
      endpoint: "/api/site-links",
    }),
    editable: true,
    displayOrder: 12,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Select site links to display for ministries links',
    multipleOccurrence: true,
  },
  {
    entityName: 'footer',
    fieldName: 'legalLinks',
    label: 'Legal Links',
    fieldType: 'select',
    optionsJson: JSON.stringify({
      type: "dynamic",
      endpoint: "/api/site-links",
    }),
    editable: true,
    displayOrder: 13,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Select site links to display as legal links',
    multipleOccurrence: true,
  },
];

const growInFaithConfigFields = [
  {
    entityName: 'growInFaith',
    fieldName: 'title',
    label: 'Title',
    fieldType: 'text',
    editable: true,
    displayOrder: 1,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Text for Grow in faith section',
  },
  {
    entityName: 'growInFaith',
    fieldName: 'description',
    label: 'Description',
    fieldType: 'textarea',
    editable: true,
    displayOrder: 2,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Description for Grow in faith section',
  },
  {
    entityName: 'growInFaith',
    fieldName: 'secondDescription',
    label: 'Second Description',
    fieldType: 'textarea',
    editable: true,
    displayOrder: 3,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Additional Decription for Grow in faith section',
  },
  {
    entityName: 'growInFaith',
    fieldName: 'image',
    label: 'Grow in faith Image',
    fieldType: 'url',
    editable: true,
    displayOrder: 4,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Image for Grow in faith section',
  },
  {
    entityName: 'growInFaith',
    fieldName: 'buttonText',
    label: 'Grow in faith Button Text',
    fieldType: 'text',
    editable: true,
    displayOrder: 5,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Button text for Grow in faith section',
  },
  {
    entityName: 'growInFaith',
    fieldName: 'ButtonLink',
    label: 'Link for Grow in faith button',
    fieldType: 'url',
    editable: true,
    displayOrder: 6,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Link for Grow in faith button',
  },
];

const itemTagConfigFields = [
  {
    entityName: 'itemTag',
    fieldName: 'label',
    label: 'Item Tag Label',
    fieldType: 'text',
    editable: true,
    displayOrder: 1,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Label for Item Tag',
  },
  {
    entityName: 'itemTag',
    fieldName: 'isActive',
    label: 'Item Tag Active Status',
    fieldType: 'boolean',
    editable: true,
    displayOrder: 2,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Active status for Item Tag',
  }
];

const ministryConfigFields = [
  {
    entityName: 'ministry',
    fieldName: 'icon',
    label: 'Item Tag Icon',
    fieldType: 'select',
    optionsJson: JSON.stringify({
      type: "dynamic",
      endpoint: "/api/icons",
    }),
    editable: true,
    displayOrder: 1,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Icon for Item Tag',
  },
  {
    entityName: 'ministry',
    fieldName: 'title',
    label: 'Ministry Title',
    fieldType: 'text',
    editable: true,
    displayOrder: 2,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Title for the ministry',
  },
  {
    entityName: 'ministry',
    fieldName: 'description',
    label: 'Ministry Description',
    fieldType: 'textarea',
    editable: true,
    displayOrder: 2,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Description of the ministry',
  },
  {
    entityName: 'ministry',
    fieldName: 'meetingTime',
    label: 'Ministry Meeting time',
    fieldType: 'text',
    editable: true,
    displayOrder: 2,
    helpText: 'Meeting time for the ministry',
  },
  {
    entityName: 'ministry',
    fieldName: 'location',
    label: 'Ministry Meeting Location',
    fieldType: 'text',
    editable: true,
    displayOrder: 2,
    helpText: 'Meeting Location for the ministry',
  },
  {
    entityName: 'ministry',
    fieldName: 'leader',
    label: 'Ministry Leader',
    fieldType: 'text',
    editable: true,
    displayOrder: 2,
    helpText: 'Current Leader of the ministry',
  },
  {
    entityName: 'ministry',
    fieldName: 'members',
    label: 'Ministry Members',
    fieldType: 'text',
    editable: true,
    displayOrder: 2,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Estimation of number of members in ministry',
  },
  {
    entityName: 'ministry',
    subEntityName: 'acvitivies',
    fieldName: 'activityName',
    label: 'Ministry Activities',
    fieldType: 'text',
    editable: true,
    displayOrder: 2,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Activities for the ministry',
    multipleOccurrence: true,
  },
];

const sermonConfigFields = [
  {
    entityName: 'sermon',
    fieldName: 'title',
    label: 'Sermon Title',
    fieldType: 'text',
    editable: true,
    displayOrder: 1,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Title for the sermon',
  },
  {
    entityName: 'sermon',
    fieldName: 'minister',
    label: 'Minister',
    fieldType: 'text',
    editable: true,
    displayOrder: 2,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Name of the minister for the sermon',
  },
  {
    entityName: 'sermon',
    fieldName: 'date',
    label: 'Sermon date',
    fieldType: 'date',
    editable: true,
    displayOrder: 3,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Date of the sermon',
  },
  {
    entityName: 'sermon',
    fieldName: 'duration',
    label: 'Sermon duration',
    fieldType: 'text',
    editable: true,
    displayOrder: 4,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Duration of the sermon',
  },
  {
    entityName: 'sermon',
    fieldName: 'image',
    label: 'Image placeholder for sermon',
    fieldType: 'url',
    editable: true,
    displayOrder: 5,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Image placeholder for displaying the sermon',
  },
  {
    entityName: 'sermon',
    fieldName: 'featured',
    label: 'Is Sermon Featured',
    fieldType: 'boolean',
    editable: true,
    displayOrder: 6,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Semon featured?',
  },
  {
    entityName: 'sermon',
    fieldName: 'videoUrl',
    label: 'Video Link for the Sermon (YouTube)',
    fieldType: 'url',
    editable: true,
    displayOrder: 7,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Video link of the sermon on YouTube, for example',
  },
  {
    entityName: 'sermon',
    subEntityName: 'tags',
    label: 'Sermon Tag',
    fieldName: 'label',
    fieldType: 'select',
    optionsJson: JSON.stringify({
      type: "dynamic",
      endpoint: "/api/tags",
    }),
    editable: true,
    displayOrder: 8,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Tags for the sermon',
    multipleOccurrence: true
  },
];

const siteLinkConfigFields = [
  {
    entityName: 'siteLink',
    fieldName: 'label',
    label: 'Label for Site link',
    fieldType: 'label',
    editable: true,
    displayOrder: 1,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Label text for Site link',
  },
  {
    entityName: 'siteLink',
    fieldName: 'url',
    label: 'URL link for the site link',
    fieldType: 'url',
    editable: true,
    displayOrder: 2,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'URL Link for site link',
  },
];

const socialLinkConfigFields = [
  {
    entityName: 'social',
    fieldName: 'icon',
    label: 'Item Tag Icon',
    fieldType: 'select',
    optionsJson: JSON.stringify({
      type: "dynamic",
      endpoint: "/api/icons/social",
    }),
    editable: true,
    displayOrder: 1,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Icon for Social platform',
  },
  {
    entityName: 'social',
    fieldName: 'platform',
    label: 'Social Platform Name',
    fieldType: 'text',
    editable: true,
    displayOrder: 2,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Platform Name for social platform',
  },
  {
    entityName: 'social',
    fieldName: 'name',
    label: 'Social Name',
    fieldType: 'text',
    editable: true,
    displayOrder: 3,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Provided Name of the Social platform',
  },
  {
    entityName: 'social',
    fieldName: 'url',
    label: 'Link to social platform',
    fieldType: 'text',
    editable: true,
    displayOrder: 2,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Link to the social platform',
  },
];

const statisticsConfigFields = [
  {
    entityName: 'statistics',
    fieldName: 'backgroundImage',
    label: 'Background Image',
    fieldType: 'url',
    editable: true,
    displayOrder: 1,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Background Image for Statistics section',
  },
  {
    entityName: 'statistics',
    subEntityName: 'statItem',
    fieldName: 'icon',
    label: 'Statistics Icon',
    fieldType: 'select',
    optionsJson: JSON.stringify({
      type: "dynamic",
      endpoint: "/api/icons",
    }),
    editable: true,
    displayOrder: 2,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Icon for Specific statistic',
    multipleOccurrence: true,
    maxOccurrence: 4,
  },
  {
    entityName: 'statistics',
    subEntityName: 'statItem',
    fieldName: 'label',
    label: 'Label for Statictic Item',
    fieldType: 'text',
    editable: true,
    displayOrder: 3,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Label for Statistic Item',
    multipleOccurrence: true,
    maxOccurrence: 4,
  },
  {
    entityName: 'statistics',
    subEntityName: 'statItem',
    fieldName: 'number',
    label: 'Statistic Number',
    fieldType: 'text',
    editable: true,
    displayOrder: 4,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Number value of Statistic',
    multipleOccurrence: true,
    maxOccurrence: 4,
  },
];

const paymentOptionConfigFields = [
  {
    entityName: 'paymentOption',
    fieldName: 'title',
    label: 'Payment Option Title',
    fieldType: 'select',
    optionsJson: JSON.stringify({
      type: 'static',
      value: [
        { value: 'bank_transfer', label: 'Bank Transfer' },
        { value: 'card', label: 'Card' },
        { value: 'paypal', label: 'Paypal' },
        { value: 'stripe', label: 'Stripe' },
      ]
    }),
    editable: true,
    updateEditable: false,
    authorizations: JSON.stringify({
      create: RolesEnum.SYSTEM_ADMIN,
      delete: RolesEnum.SYSTEM_ADMIN,
      update: RolesEnum.SUPER_ADMIN
    }),
    displayOrder: 1,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Payment Option Title/Type',
  },
  {
    entityName: 'paymentOption',
    fieldName: 'isEnabled',
    label: 'Is Payment Option Enabled?',
    fieldType: 'boolean',
    editable: true,
    displayOrder: 2,
    authorizations: JSON.stringify({
      create: RolesEnum.SYSTEM_ADMIN,
      delete: RolesEnum.SYSTEM_ADMIN,
      update: RolesEnum.SUPER_ADMIN
    }),
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: 'Payment Option Enabled toggle',
  },
  {
    entityName: 'paymentOption',
    subEntityName: 'bank_transfer',
    fieldName: 'account_number',
    label: 'Account Number',
    fieldType: 'text',
    editable: true,
    authorizations: JSON.stringify({
      create: RolesEnum.SYSTEM_ADMIN,
      delete: RolesEnum.SYSTEM_ADMIN,
      update: RolesEnum.SUPER_ADMIN
    }),
    displayOrder: 3,
    helpText: 'Bank Account Number for Bank Transfer',
  },
  {
    entityName: 'paymentOption',
    subEntityName: 'bank_transfer',
    fieldName: 'account_name',
    label: 'Account Name',
    fieldType: 'text',
    editable: true,
    authorizations: JSON.stringify({
      create: RolesEnum.SYSTEM_ADMIN,
      delete: RolesEnum.SYSTEM_ADMIN,
      update: RolesEnum.SUPER_ADMIN
    }),
    displayOrder: 4,
    helpText: 'Bank Account Name for Bank Transfer',
  },
  {
    entityName: 'paymentOption',
    subEntityName: 'bank_transfer',
    fieldName: 'bank_name',
    label: 'Bank Name',
    fieldType: 'text',
    editable: true,
    authorizations: JSON.stringify({
      create: RolesEnum.SYSTEM_ADMIN,
      delete: RolesEnum.SYSTEM_ADMIN,
      update: RolesEnum.SUPER_ADMIN
    }),
    displayOrder: 5,
    helpText: 'Bank for Bank Transfer',
  },
];

const scheduleProgramConfigFields = [
  {
    entityName: 'scheduledProgram',
    fieldName: 'title',
    label: 'Event Title',
    fieldType: 'text',
    editable: true,
    displayOrder: 1,
    validationRulesJson: JSON.stringify({ required: true, minLength: 3, maxLength: 150 }),
  },
  {
    entityName: 'scheduledProgram',
    fieldName: 'scheduledDay',
    label: 'Scheduled Day',
    fieldType: 'select',
    optionsJson: JSON.stringify({
      type: 'static',
      value: Object.entries(DayOfWeek).map(dayOfWeek => {
        return {value: dayOfWeek, label: dayOfWeek}
      })
    }),
    editable: true,
    displayOrder: 2,
    validationRulesJson: JSON.stringify({ required: true }),
  },
  {
    entityName: 'scheduledProgram',
    fieldName: 'startTime',
    label: 'Start Time',
    fieldType: 'time',
    editable: true,
    displayOrder: 3,
    validationRulesJson: JSON.stringify({ required: true }),
  },
  {
    entityName: 'scheduledProgram',
    fieldName: 'endTime',
    label: 'End Time',
    fieldType: 'time',
    editable: true,
    displayOrder: 4,
    validationRulesJson: JSON.stringify({ required: true }),
  },
  {
    entityName: 'scheduledProgram',
    fieldName: 'location',
    label: 'Location',
    fieldType: 'text',
    editable: true,
    displayOrder: 5,
  },
  {
    entityName: 'scheduledProgram',
    fieldName: 'description',
    label: 'Description',
    fieldType: 'textarea',
    editable: true,
    displayOrder: 6,
  },
  {
    entityName: 'scheduledProgram',
    fieldName: 'icon',
    label: 'Icon',
    fieldType: 'text',
    editable: true,
    displayOrder: 7,
  },
  {
    entityName: 'scheduledProgram',
    fieldName: 'image',
    label: 'Image URL',
    fieldType: 'url',
    editable: true,
    displayOrder: 8,
  },
];

const nextStepConfigFields = [
  {
    entityName: 'nextStep',
    fieldName: 'title',
    label: 'Next Step Title',
    fieldType: 'text',
    editable: true,
    displayOrder: 1,
    validationRulesJson: JSON.stringify({ required: true }),
  },
  {
    entityName: 'nextStep',
    fieldName: 'subtitle',
    label: 'Next Step Subtitle',
    fieldType: 'text',
    editable: true,
    displayOrder: 2,
    validationRulesJson: JSON.stringify({ required: true }),
  },
  {
    entityName: 'nextStep',
    fieldName: 'page',
    label: 'Related Page',
    fieldType: 'text',
    editable: true,
    displayOrder: 3,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: "Related Page for Next Step Section"
  },
];

const questionNextStepConfigFields = [
    {
    entityName: 'questionNextStep',
    fieldName: 'title',
    label: 'Next Step Title',
    fieldType: 'text',
    editable: true,
    displayOrder: 1,
    validationRulesJson: JSON.stringify({ required: true }),
  },
  {
    entityName: 'questionNextStep',
    fieldName: 'subtitle',
    label: 'Next Step Subtitle',
    fieldType: 'text',
    editable: true,
    displayOrder: 2,
    validationRulesJson: JSON.stringify({ required: true }),
  },
  {
    entityName: 'questionNextStep',
    fieldName: 'page',
    label: 'Related Page',
    fieldType: 'text',
    editable: true,
    displayOrder: 3,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: "Related Page for Next Step Section"
  },
];

const watchLiveConfigFields = [
  {
    entityName: 'live',
    fieldName: 'videoUrl',
    label: 'YouTube Live Video URL',
    fieldType: 'url',
    editable: true,
    displayOrder: 3,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: "URL for current YouTube Live"
  },
  {
    entityName: 'live',
    fieldName: 'videoUrl',
    label: 'YouTube Live Video URL',
    fieldType: 'url',
    editable: true,
    displayOrder: 3,
    validationRulesJson: JSON.stringify({ required: true }),
    helpText: "URL for current YouTube Live"
  }
]


const configFields = [
  ...heroConfigFields,
  ...eventConfigFields,
  ...pastorConfigFields,
  ...galleryItemConfigFields,
  ...aboutConfigFields,
  ...beliefConfigFields,
  ...contactInfoConfigFields,
  ...ctaConfigFields,
  ...footerConfigFields,
  ...growInFaithConfigFields,
  ...itemTagConfigFields,
  ...ministryConfigFields,
  ...sermonConfigFields,
  ...siteLinkConfigFields,
  ...socialLinkConfigFields,
  ...statisticsConfigFields,
  ...paymentOptionConfigFields,
  ...scheduleProgramConfigFields,
  ...nextStepConfigFields,
  ...questionNextStepConfigFields,
  ...watchLiveConfigFields,
];

export async function seedConfigFields() {
  const repo = AppDataSource.getRepository(ConfigField);
  for (const field of configFields) {
    const configField = repo.create(field);
    await repo.save(configField);
  }
  console.log('Seeded Config Fields successfully!');
}
